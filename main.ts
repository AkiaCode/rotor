import { parse } from "https://deno.land/x/swc@0.2.1/mod.ts";

if (Deno.args[0] == undefined) throw new Error('not found')
const code = await Deno.readTextFile(Deno.args[0]);

interface Rotor {
  client: string,
  method: string,
  path: string,
  func: string,
}

const ro: Rotor[] = []

const ast = parse(code, {
  target: "es2019",
  syntax: "typescript",
  comments: false,
});

if (!code.includes('//@rotor')) throw new Error('EOF')
// class body
let client
for (const body of ast.body) {
  if (body.type !== 'ClassDeclaration') continue
    if (body.identifier.type === 'Identifier') {
      client = body.identifier.value
      //console.log(body.identifier.value) //client = App
    }
    // methods body
    for (const func of body.body) {
      //console.log(func)
      if (func.type !== 'ClassMethod' && func.kind !== 'method') continue
      if (func.key.type !== 'StringLiteral') continue
      //console.log(func.key.value)
      //console.log(code.substring(func.key.span.end-1, func.function.body.span.end))
      ro.push({
        'client': client,
        'path': func.key.value,
        'func': code.substring(func.key.span.end-1, func.function.body.span.end)
      } as Rotor)
    }
}

let new_code = ''
new_code += '// NOTE: This file is auto-generated by Rotor\n'
new_code += `import { Bansa, listen } from \"https://deno.land/x/bansa@0.0.4/mod.ts\"\n\nconst ${ro[0].client} = Bansa;\n\n`
for (const roro of ro) {
  new_code += `${roro.client}['${roro.path}'] = ${roro.func.replace(')', ') =>')}\n`
}
new_code += 'listen({ port: 8080 });'
//console.log(new_code)
await Deno.writeTextFile(Deno.args[0].replace('.ts', '.rotor.ts'),  new_code)